#include<iostream>
using namespace std;

int matrix[100][100];
int heap_array[100];
int heap_index;

struct pair1{
	int x;
	int y;
};
pair1 a[100];

void insert_heap(int val,int distance1[]){
	heap_array[heap_index]=val;
	heap_index++;
	int t=heap_index-1;
	while(t!=0){
		int a=(t-1)/2;
		if(distance1[heap_array[t]]<distance1[heap_array[a]]){
			swap(heap_array[t],heap_array[a]);
			t=a;
		}
		else break;
	}
}
void heapify(int t,int distance1[]){
	int left=(2*t)+1;
	int right=(2*t)+2;
	int start=t;
	if(left<heap_index && distance1[heap_array[left]]<distance1[heap_array[t]])start=left;
	if(right<heap_index && distance1[heap_array[right]]<distance1[heap_array[start]])start=right;
	if(start!=t){
		swap(heap_array[start],heap_array[t]);
		heapify(start,distance1);
	}
}
int extract_min(int distance1[]){
	int t=heap_array[0];
	heap_array[0]=heap_array[heap_index-1];
	heap_index--;
	heapify(0,distance1);
	return t;
}
void heap(int distance1[]){
	int a=heap_index/2-1;
	for(int i=a;i>=0;i--)heapify(i,distance1);
}

void dijisktra(int distance1[],int size){
	distance1[0]=0;
	while(heap_index!=0){
		int min1=extract_min(distance1);
		// cout<<"min_index="<<min1<<endl;
		// for(int i=0;i<size;i++)cout<<distance1[i]<<" ";
		// cout<<endl;
		for(int i=0;i<size;i++){
			if(matrix[min1][i]!=-1){
				if(distance1[i]==99999){
					distance1[i]=distance1[min1]+matrix[min1][i];
					insert_heap(i,distance1);
				}
				else if(distance1[i]>distance1[min1]+matrix[min1][i]){
						distance1[i]=distance1[min1]+matrix[min1][i];
						heap(distance1);
				}
			}
		}
	}
}

int main(){
	int test;
	cin>>test;
	while(test--){
		int n;
		cin>>n;
		int size=(2*n)+2;
		cin>>a[0].x>>a[0].y>>a[size-1].x>>a[size-1].y;
		int weight[n+1];
		int k=1;
		for(int i=1;i<size-1;i+=2){
			cin>>a[i].x>>a[i].y>>a[i+1].x>>a[i+1].y>>weight[k];
			k++;
		}
		for(int i=0;i<size;i++)for(int j=0;j<size;j++)matrix[i][j]=-1;
		for(int i=0;i<size-1;i++){
			for(int j=i+1;j<size;j++){
				int t=abs(a[i].x-a[j].x)+abs(a[i].y-a[j].y);
				matrix[i][j]=t;
				matrix[j][i]=t;
			}
		}
		k=1;
		for(int i=1;i<size-1;i+=2){
			matrix[i][i+1]=weight[k];
			matrix[i+1][i]=weight[k];
			k++;
		}
		// for(int i=0;i<size;i++){
		// 	for(int j=0;j<size;j++)cout<<matrix[i][j]<<" ";
		// 	cout<<endl;
		// }

		if(n==0)cout<<abs(a[0].x-a[1].x)+abs(a[0].y-a[1].y)<<endl;
		else{
			int distance1[size];
			for(int i=0;i<size;i++)distance1[i]=99999;
			int heap_index=0;
			insert_heap(0,distance1);
			dijisktra(distance1,size);
			cout<<distance1[size-1]<<endl;
		}
	}
	return 0;
}