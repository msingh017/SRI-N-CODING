#include<iostream>
using namespace std;
#define INF 0x7fffffff
int white[1000];
int black[1000];
int gray[1000];
int parent[1000];

struct Node{
	int val;
	Node *next;
};
Node *a[1000];
Node *head;

Node *get_new_node(int data){
	Node *new_node=new Node();
	new_node->val=data;
	new_node->next=NULL;
	return new_node;
}
Node *insert(int ind,int data){
	if(a[ind]==NULL)a[ind]=get_new_node(data);
	else{
		Node *ptr=get_new_node(data);
		ptr->next=a[ind];
		a[ind]=ptr;
	}
	return a[ind];
}
Node *reverse_list(){
	Node *prev=NULL;
	Node *curr=head;
	Node *next=head;
	while(curr!=NULL){
		next=curr->next;
		curr->next=prev;
		prev=curr;
		curr=next;
	}
	return prev;
}

void count_cycle(int start,int end){
	head=NULL;
	if(start!=end){
		head=get_new_node(end);
		Node *temp=head;
		temp->next=get_new_node(start);
		temp=temp->next;
		while(parent[start]!=end){
			temp->next=get_new_node(parent[start]);
			temp=temp->next;
			start=parent[start];
		}
	}
	else head=get_new_node(start);
}

bool dfs_check(int start){
	white[start]=0;
	gray[start]=1;
	for(Node *ptr=a[start];ptr!=NULL;ptr=ptr->next){
		if(black[ptr->val]==1)continue;
		if(gray[ptr->val]==1){
			count_cycle(start,ptr->val);
			return true;
		}
		parent[ptr->val]=start;
		if(dfs_check(ptr->val))return true;
	}
	gray[start]=0;
	black[start]=1;
	return false;
}
bool cycle_check(int vertex){
	for(int i=1;i<=vertex;i++){
		if(white[i]==1){
			parent[i]=-1;
			if(dfs_check(i))return true;
		}
	}
	return false;
}

int main(){
	int test;
	cin>>test;
	for(int t=1;t<=test;t++){
		int vertex,edge,x,y;
		cin>>vertex>>edge;
		for(int i=1;i<=vertex;i++)a[i]=NULL;
		for(int i=0;i<edge;i++){
			cin>>x>>y;
			a[x]=insert(x,y);
		}
		for(int i=1;i<=vertex;i++){
			gray[i]=0;
			black[i]=0;
			parent[i]=0;
			white[i]=1;
		}
		if(!cycle_check(vertex))cout<<"No Cycle"<<endl;
		else{
			cout<<"Cycle"<<endl;
			head=reverse_list();
			while(head!=NULL){
				cout<<head->val<<" ";
				head=head->next;
			}
			cout<<endl;
		}
		//cout<<"#"<<t<<" "<<result<<endl;
	}
	return 0;
}